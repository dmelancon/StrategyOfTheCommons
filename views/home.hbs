{{!< ../views/layouts/main}}
<head>
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" href="http://code.jquery.com/mobile/1.4.4/jquery.mobile-1.4.4.min.css">
<script src="http://code.jquery.com/jquery-1.11.1.min.js"></script>
<script src="http://code.jquery.com/mobile/1.4.4/jquery.mobile-1.4.4.min.js"></script>
</head>
	<title> CloudCommuting Test </title>

	<style>
	.bar{
  		background: #5e5e5e;
  		height: 20px;
  		float:left;
  	}
  	.bar-blank{
  		background: #f0f0f0;
  		height: 20px;
  		float:left;
  	}
    .inventory{
      background: transparent;
      font: 12px Helvetica;
      height: 20px;
    }
    .line{
      border-bottom: 1px; solid black;
    }
    .full{
      background: #5e5e5e;
      height: 30px;
  
      border: 2px solid black;
      border-radius: 7pt;
      margin-right: 5px;
      -webkit-flex: 1 3 5%;
      flex: 1 3 5%;
      -webkit-order: 2;
      order: 2;">
    }
    .empty{
      background: transparent;
       height: 30px;
  
      border: 2px solid black;
      border-radius: 7pt;
      margin-right: 5px;
      -webkit-flex: 1 3 5%;
      flex: 1 3 5%;
      -webkit-order: 2;
      order: 2;">
    }


	</style>
	<body>
	 	<div id="barChartHolder">
		</div>
		<div id="line">
		</div>
	   	<div id="inventoryHolder">
	   	</div>
	</body>

	<script src="/socket.io/socket.io.js"></script>
	<script>
		var data = [];
		var dataStation = [];
		var myId = {{mPlayer}}; 
		var lastStationVisited = 999;
		var playerIds = [1,2,3,4,5,6,7,8,9,10];
		var playerStock = [false, false, false, false, false, false, false, false, false, false];
		var playerPoints = [0,0,0,0,0,0,0,0,0,0];
		
		var stationIds = [1,2,3,4,5];
		var stationStock = [0,0,0,0,0];
		var stationBonuses = [false, false, false, false, false];
		var stationBonusPts = [0,0,0,0,0];

		// =============================================
		// 1 - connect to node socket.io server
		// =============================================
		var socket = io.connect('/');	

		socket.on('connect', function () {
			console.log("Connected");
			createBarChart(data, dataStation);
		});

		// =============================================
		// 2 - Receive a check-in event from the server
		// =============================================
		socket.on('playerCheckIn', function (checkInData){

			console.log('Received CheckIn Event');
			console.log(checkInData);
			var playerId = parseInt(checkInData[0]);
			var stationId = parseInt(checkInData[1]);

			lastStationVisited = parseInt(checkInData[2]);
			console.log("last station: " + lastStationVisited);
			var index = playerIds.indexOf(parseInt(playerId));

			
			// =============================================
			// 3 - Dropping off a bike into a station
			// =============================================
			// If I am the player, and I have stock, and the station has space, and I wasn't just here ... 
			// if there is only one space left, alert the user that they will penalize everyone for dropping it
			if (myId == playerId && playerStock[index] && checkInStation(stationId) && !lastVisited(stationId)){
				if(stationStock[index] == 4){
					var r = confirm("Returning Bike will incur system wide penalty, proceed?");
					if (r) {
						var checkInStatus = [playerId, stationId];
					    socket.emit ('checkInConfirm', checkInStatus);
					    // lastStationVisited = stationId; //REMOVE THIS
					    console.log('Returned Bike!');
					}
				} else {
					var r = confirm("Return Bike?");
					if (r) {
						var checkInStatus = [playerId, stationId];
					    socket.emit ('checkInConfirm', checkInStatus);
					    // lastStationVisited = stationId; //REMOVE THIS
					    console.log('Returned Bike!');
					}
				} 				

			// =============================================
			// 4 - Taking a bike from a station
			// =============================================
			// If I am the player, and I don't have stock, and the station has stock, and I wasn't just here ... 
			// if there is only one stock left, alert the user that they will penalize everyone for taking it
			} else if (myId == playerId && !playerStock[index] && checkOutStation(stationId) && !lastVisited(stationId)){
				if(stationStock[index] == 1){
					var r = confirm("Taking bike will incur system wide penalty, proceed?");
					if (r) {
						var checkInStatus = [playerId, stationId];
					    socket.emit ('checkInConfirm', checkInStatus);
					    // lastStationVisited = stationId; //REMOVE THIS
					    console.log('Returned Bike!');
					}
				} else {				
					var r = confirm("Take Bike?");
					if (r) {
						var checkInStatus = [playerId, stationId];
					    socket.emit ('checkInConfirm', checkInStatus);
					    // lastStationVisited = stationId;   //REMOVE THIS
					    console.log('Took Bike!');
					}
				} 				 

			// =====================================================
			// 5 - Prevent users from returning or taking from the same station
			// =====================================================
			// If I am the player, and I don't have stock, and the station has stock, and I wasn't just here ... 
			// if there is only one stock left, alert the user that they will penalize everyone for taking it
			} else if (myId == playerId && lastVisited(stationId)){
				if (playerStock[index]){
					alert("You have to return to a different station!");
				} else if (!playerStock[index]) {
					alert("You can't pickup from the place you dropped off!");
				}
			}
			 createBarChart(data, dataStation);
		});

		// support function to check if the station has space available
		function checkInStation(station){			
			var index = stationIds.indexOf(parseInt(station));
			if (stationStock[index] == 5){
				alert("Station is full - find another!");
				return false;
			} else {
				return true;
			}
		};

		// support function to check if the station has stock available
		function checkOutStation(station){			
			var index = stationIds.indexOf(parseInt(station));
			if (stationStock[index] == 0){
				alert("Station is empty - find another!");
				return false;
			} else {
				return true;
			}
		};

		// support function to check if the station was just visited
		function lastVisited(station){
			if (station == lastStationVisited){
				return true;
			} else {
				return false;
			}
		}

		socket.on('playerUpdate', function (playerData){
			//playerId playerData[0] number
			//playerPts playerData[1] number
			//playerStock playerData[2]	boolean

			for (var i = 0; i < playerData.length; i++){
				var index = playerIds.indexOf(parseInt(playerData[i][0]));
				playerPoints[index] = playerData[i][1];
				playerStock[index] = playerData[i][2];
			}
			createBarChart(data, dataStation);
		});

		socket.on('stationUpdate', function (stationData){
			//stationId stationData[0] number
			//stationInv stationData[1] number
			//stationBonus stationData[2] boolean
			//stationBonusPts = stationData[3] number	

			for (var i = 0; i < stationData.length; i++){
				var index = stationIds.indexOf(parseInt(stationData[i][0]));
				stationStock[index] = stationData[i][1];
				stationBonuses[index] = stationData[i][2];
				stationBonusPts[index] = stationData[i][3];
			}
			$(document).ready(function(){
  //console.log("I am doing well.");
  	// let's render some data based on an array
		  		data =[];
				dataStation = [];
		        var changeColor = [];

		    for (var i = 0; i<playerIds.length; i++){
		      data.push({name:'Player ' + playerIds[i], playerPoints: playerPoints[i], playerIds: playerIds[i], playerStock: playerStock[i]});
		    }
		    for (var i = 0; i<stationStock.length; i++){
		      var changeCol = [];
		        for (var j = 0; j< (stationStock[i]); j++){
		              changeCol.push('full');
		        }
		        for (var j = 0; j< (5-stationStock[i]); j++){
		              changeCol.push('empty');
		        }  
		        changeColor.push(changeCol);
		    }
		    for (var i = 0; i<stationIds.length; i++){
		      dataStation.push({name:'Station ' + stationIds[i], stationId: stationIds[i], stationBonus: stationBonusPts[i], stationStock: stationStock[i], changeColor: changeColor[i]});
		    }
		    console.log(changeColor);
		    
				});	
			createBarChart(data, dataStation);
		
});

function createBarChart(data, dataStation){
  			// the 'each' function goes through every element of the data array and operates on it
  		//$('body').html(
  			$('#barChartHolder').empty();
  			$('#line').empty();
  			$('#inventoryHolder').empty();
	  		$.each(data, function(index) {
	          $('#barChartHolder').append(
	            '<div class="chart-holder" id="'+data[index].playerIds+'" style="'+
	              'position: relative;'+
	              'min-height: 10px;'+
	              'max-width: 400px;'+
	              'margin: 25px auto;'+
	              'padding: 0px;'+
	              'display: -webkit-flex;'+
	              'display: flex;'+
	              'flex-flow: row;'+
	              'flex-flow: row;'+
	              'border-bottom: 0px solid #c0c0c0;'+
	              'margin: 15px auto;'+
	            '">'+
	            '<div id="name" style="'+
	            'position: relative;'+
	            'font: 14px Helvetica;'+
	              'margin-left: 5px;'+
	              'padding-right: 10px;'+
	              'text-align: right;'+
	              'border: 1px; solid black;'+
	              'border-radius: 0pt;'+
	              'background: transparent;'+
	              '-webkit-flex: 1 3 50%;'+
	                      'flex: 1 3 50%;'+
	              '-webkit-order: 1;'+
	                      'order: 1;'+
	                      '">'+data[index].name+'</div>'+
	            	'<div class="bar" style="border-right: 2px solid black; -webkit-flex: 1 3 '+data[index].playerPoints+'%; flex: 1 3 '+data[index].playerPoints+'%; -webkit-order: 2; order: 2;"></div>' +
	            	'<div class="bar-blank" style="-webkit-flex: 1 3 '+(parseInt(100-data[index].playerPoints))+'%; flex: 1 3 '+(parseInt(100-data[index].playerPoints))+'%; -webkit-order: 3; order: 3;"></div>' +
	          	'</div>'
	          );
	       });  
	      $.each(dataStation, function(index) {
	          $('#line').append(
	          '<div style="position: relative; margin-left: auto; margin-right: auto; border-bottom: 1px solid #c0c0c0; max-width: 400px; text-align: center">'
	          );
	          $('#inventoryHolder').append(
	            '<div class="inventory" id="'+dataStation[index].ids+'" style="'+
	              'position: relative;'+
	              'min-height: 30px;'+
	              'max-width: 400px;'+
	              'margin: 15px auto;'+
	              'padding: 0px;'+
	              'display: -webkit-flex;'+
	              'display: flex;'+
	              'flex-flow: row;'+
	              '-webkit-flex-flow: row;'+
	              'border-bottom: 0px solid #c0c0c0;'+
	              'margin: 15px auto;'+
	            '">'+
	            '<div id="stationName" style="'+
	            'position: relative;'+
	            'font: 15px Helvetica;'+
	              'margin-left: 5px;'+
	              'padding-right: 10px;'+
	              'text-align: right;'+
	              'border: 1px; solid black;'+
	              'border-radius: 0pt;'+
	              'background: transparent;'+
	              '-webkit-flex: 1 3 40%;'+
	                      'flex: 1 3 40%;'+
	              '-webkit-order: 1;'+
	                      'order: 1;'+
	                      '">Station #'+dataStation[index].stationId+' - BONUS: '+dataStation[index].stationBonus+'</div>'+
	              '<div class="'+dataStation[index].changeColor[0]+'"></div>' +
	              '<div class="'+dataStation[index].changeColor[1]+'" style=""></div>' +
	              '<div class="'+dataStation[index].changeColor[2]+'" style=""></div>' +
	              '<div class="'+dataStation[index].changeColor[3]+'" style=""></div>' +
	              '<div class="'+dataStation[index].changeColor[4]+'" style=""></div>' +
	              // 'console.log('+changeColor+');'+
	            '</div>'
	          );
	     });
	    //);
  };
	</script>
</head>