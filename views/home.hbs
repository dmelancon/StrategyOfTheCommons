{{!< ../views/layouts/main}}
<head>
	<title> CloudCommuting Test </title>

	<style>

		body {
			width: 100%;
			font-family: Arial, Verdana, sans-serif;
			font-size: 100px;
			padding-top: 100px;
			background-color: hsl(0, 100%, 100%);
		}

	</style>
	<script src="/socket.io/socket.io.js"></script>
	<script>

		var myId = {{mPlayer}}; 
		var lastStationVisited = 999;

		var playerIds = [1,2,3,4,5,6,7,8,9,10];
		var playerStock = [false, false, false, false, false, false, false, false, false, false];
		var playerPoints = [0,0,0,0,0,0,0,0,0,0];
		
		var stationIds = [1,2,3,4,5];
		var stationStock = [0,0,0,0,0];
		var stationBonuses = [false, false, false, false, false];
		var stationBonusPts = [0,0,0,0,0];

		// =============================================
		// 1 - connect to node socket.io server
		// =============================================
		var socket = io.connect('/');	

		socket.on('connect', function () {
			console.log("Connected");
		});

		// =============================================
		// 2 - Receive a check-in event from the server
		// =============================================
		socket.on('playerCheckIn', function (checkInData){

			console.log('Received CheckIn Event');
			console.log(checkInData);
			var playerId = parseInt(checkInData[0]);
			var stationId = parseInt(checkInData[1]);

			lastStationVisited = parseInt(checkInData[2]);
			console.log("last station: " + lastStationVisited);
			var index = playerIds.indexOf(parseInt(playerId));

			
			// =============================================
			// 3 - Dropping off a bike into a station
			// =============================================
			// If I am the player, and I have stock, and the station has space, and I wasn't just here ... 
			// if there is only one space left, alert the user that they will penalize everyone for dropping it
			if (myId == playerId && playerStock[index] && checkInStation(stationId) && !lastVisited(stationId)){
				if(stationStock[index] == 4){
					var r = confirm("Returning Bike will incur system wide penalty, proceed?");
					if (r) {
						var checkInStatus = [playerId, stationId];
					    socket.emit ('checkInConfirm', checkInStatus);
					    // lastStationVisited = stationId; //REMOVE THIS
					    console.log('Returned Bike!');
					}
				} else {
					var r = confirm("Return Bike?");
					if (r) {
						var checkInStatus = [playerId, stationId];
					    socket.emit ('checkInConfirm', checkInStatus);
					    // lastStationVisited = stationId; //REMOVE THIS
					    console.log('Returned Bike!');
					}
				} 				

			// =============================================
			// 4 - Taking a bike from a station
			// =============================================
			// If I am the player, and I don't have stock, and the station has stock, and I wasn't just here ... 
			// if there is only one stock left, alert the user that they will penalize everyone for taking it
			} else if (myId == playerId && !playerStock[index] && checkOutStation(stationId) && !lastVisited(stationId)){
				if(stationStock[index] == 1){
					var r = confirm("Taking bike will incur system wide penalty, proceed?");
					if (r) {
						var checkInStatus = [playerId, stationId];
					    socket.emit ('checkInConfirm', checkInStatus);
					    // lastStationVisited = stationId; //REMOVE THIS
					    console.log('Returned Bike!');
					}
				} else {				
					var r = confirm("Take Bike?");
					if (r) {
						var checkInStatus = [playerId, stationId];
					    socket.emit ('checkInConfirm', checkInStatus);
					    // lastStationVisited = stationId;   //REMOVE THIS
					    console.log('Took Bike!');
					}
				} 				 

			// =====================================================
			// 5 - Prevent users from returning or taking from the same station
			// =====================================================
			// If I am the player, and I don't have stock, and the station has stock, and I wasn't just here ... 
			// if there is only one stock left, alert the user that they will penalize everyone for taking it
			} else if (myId == playerId && lastVisited(stationId)){
				if (playerStock[index]){
					alert("You have to return to a different station!");
				} else if (!playerStock[index]) {
					alert("You can't pickup from the place you dropped off!");
				}
			}
			 
		});

		// support function to check if the station has space available
		function checkInStation(station){			
			var index = stationIds.indexOf(parseInt(station));
			if (stationStock[index] == 5){
				alert("Station is full - find another!");
				return false;
			} else {
				return true;
			}
		};

		// support function to check if the station has stock available
		function checkOutStation(station){			
			var index = stationIds.indexOf(parseInt(station));
			if (stationStock[index] == 0){
				alert("Station is empty - find another!");
				return false;
			} else {
				return true;
			}
		};

		// support function to check if the station was just visited
		function lastVisited(station){
			if (station == lastStationVisited){
				return true;
			} else {
				return false;
			}
		}

		socket.on('playerUpdate', function (playerData){
			//playerId playerData[0] number
			//playerPts playerData[1] number
			//playerStock playerData[2]	boolean

			for (var i = 0; i < playerData.length; i++){
				var index = playerIds.indexOf(parseInt(playerData[i][0]));
				playerPoints[index] = playerData[i][1];
				playerStock[index] = playerData[i][2];
			}
		});

		socket.on('stationUpdate', function (stationData){
			//stationId stationData[0] number
			//stationInv stationData[1] number
			//stationBonus stationData[2] boolean
			//stationBonusPts = stationData[3] number	

			for (var i = 0; i < stationData.length; i++){
				var index = stationIds.indexOf(parseInt(stationData[i][0]));
				stationStock[index] = stationData[i][1];
				stationBonuses[index] = stationData[i][2];
				stationBonusPts[index] = stationData[i][3];
			}
		});	

	</script>
</head>