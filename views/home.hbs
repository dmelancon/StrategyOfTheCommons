{{!< ../views/layouts/main}}
<head>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>


	<title> CloudCommuting Test </title>

	<style>
	.bar{
  		background: #9c9c9c;
  		height: 28px;
      vertical-align: middle;
  	}
  	.barBlank{
  		background: #f0f0f0;
  		height: 28px;
/*      max-width: 200px;
*/  	}
    .bar-blank{
      background: #f0f0f0;
      height: 28px;
/*      max-width: 120px;
*/    }
    .bar-{
      background: #656464;
      height: 28px;
      max-width: 120px;
/*      max-width: 120px;
*//*      float:left;
*/    }
    .inventory{
      background: transparent;
      font: 12px Helvetica;
      height: 20px;
    }
    .line{
      border-bottom: 1px; solid black;
    }
    .full{
      background: #5e5e5e;
      height: 20px;
      width: 20px;
      border: 2px solid black;
      border-radius: 7pt;
      margin-right: 5px;
      max-width: 20px;
      -webkit-flex: 1 3 2%;
      flex: 1 3 2%;
      -webkit-order: 2;
      order: 2;">
    }
    .empty{
      background: transparent;
      height: 20px;
      width: 20px;
      border: 2px solid black;
      border-radius: 7pt;
      margin-right: 5px;
      max-width: 20px;
      -webkit-flex: 1 3 2%;
      flex: 1 3 2%;
      -webkit-order: 2;
      order: 2;">
    }
   
    .changeBack{
    background: 'backColor';
    }
    .textWrap{
      float: left;
      margin-right: 3px;
      text-align: top;
    }



	</style>
	</head>
	 <body id="bodyColorChange">
	 <div id="barChartHolder"></div>
	 <div id="line"></div>
   	 <div id="inventoryHolder"></div>    	
 	</body>
 	<script src="/socket.io/socket.io.js"></script>
	<script>
		var shouldWeUpdate = false;


		var numPlayers = 15;
		var numStations = 6;
		var data = [];
		var dataStation = [];
		var myId = {{mPlayer}}; 
		var lastStationVisited = 999;
		var playerIds = [];
		var playerStock = [];
		var playerPoints = [];
		var pStockIndicator = [];
		var onOff = [];
		var changeBack = 0;
		var activePlayer = [];
		var playerBorderOn = [];
		var maxWidthPlus = 199;
		var maxWidthMinus = 120;
		var screenWidth = 350;
		var maxAllowedPoints = 1000;
		var maxAllowedNegPoints = 200;
		var negativeDisplaySize = 30;
		var positiveDisplaySize = 50;
		var barPlus = [];
		var barMinus = [];
		var barNblankWidth =0;
		var barNWidth;
		var barWidth;
		var barBlankWidth; 
		var onMission = false;
		var missionCount = 0;
		var missionStation = Math.floor((Math.random() * numStations) + 1);
		var stationIds = [];
		var stationStock = [];
		var stationBonuses = [];
		var stationBonusPts = [];
		var pngArray = [];
		for (var i =0; i<numPlayers; i++){
			playerIds.push(i+1);
			playerStock.push(false);
			playerPoints.push(0);
			// var thisPng = document.createElement('img');
			// thisPng.classList.add('textWrap');
			// thisPng.style.width= '28px';
			// thisPng.style.height= '28px';
			// pngArray.push(thisPng);

		}
		for (var i =0; i<numStations; i++){
			stationIds.push(i+1);
			stationStock.push(0);
			stationBonuses.push(false);
			stationBonusPts.push(0);
		}
		createBarChart(data, dataStation);



		// =============================================
		// 1 - connect to node socket.io server
		// =============================================
		var socket = io.connect('/');	

		socket.on('connect', function () {
			console.log("Connected");
			createBarChart(data, dataStation);
		});

		// =============================================
		// 2 - Receive a check-in event from the server
		// =============================================
		socket.on('playerCheckIn', function (checkInData){
			createBarChart(data, dataStation);
			console.log('Received CheckIn Event');
			//console.log(checkInData);
			var playerId = parseInt(checkInData[0]);
			var stationId = parseInt(checkInData[1]);
			lastStationVisited = parseInt(checkInData[2]);

			console.log("last station: " + lastStationVisited);
			var index = playerIds.indexOf(parseInt(playerId));
			var stationIndex = stationIds.indexOf(parseInt(stationId));
			
			// =============================================
			// 3 - Dropping off a bike into a station
			// =============================================
			// If I am the player, and I have stock, and the station has space, and I wasn't just here ... 
			// if there is only one space left, alert the user that they will penalize everyone for dropping it
			if (myId == playerId && playerStock[index] && checkInStation(stationId) && !lastVisited(stationId)){
				if(stationStock[stationIndex] == 4){
					var r = confirm("Returning Bike will incur system wide penalty, proceed?");
					if (r) {
						var checkInStatus = [playerId, stationId];
					    socket.emit ('checkInConfirm', checkInStatus);
					    // lastStationVisited = stationId; //REMOVE THIS
					    console.log('Returned Bike!');
					    if (onMission){
					    	if( missionStation != stationId){
						   	 alert("This was not your mission! You are penalized 50 points!");
						   	 console.log("Mission Failed!");
						   	 var missionData = [playerId, false];
						   	 socket.emit ('missionComplete', missionData);      //set up server side penalty route
						   	}else{
						   	 alert("Mission Complete!");
						   	 console.log("missionStaiton : " + missionStation + " station ID :" + stationId);
						   	 console.log("Mission Success!");
						   	 //var missionData = [playerId, true]
						   	 //socket.emit ('missionComplete', missionData);      //set up server side penalty route
						   	}
						   	onMission = false;
						}
					}
				} else {
					var r = confirm("Return Bike?");
					if (r) {
						var checkInStatus = [playerId, stationId];
					    socket.emit ('checkInConfirm', checkInStatus);
					    // lastStationVisited = stationId; //REMOVE THIS
					    console.log('Returned Bike!');
					    if (onMission){
					    	if( missionStation != stationId){
						   	 alert("This was not your mission! You are penalized 50 points!");
						   	 console.log("Mission Failed!");
						   	 var missionData = [playerId, false];
						   	 socket.emit ('missionComplete', missionData);      //set up server side penalty route
						   	}else{
						   	 alert("Mission Complete!");
						   	 console.log("Mission Success!");
						   	 //var missionData = [playerId, true]
						   	 //socket.emit ('missionComplete', missionData);      //set up server side penalty route
						   	}
						   	onMission = false;
						}
					}
				} 				

			// =============================================
			// 4 - Taking a bike from a station
			// =============================================
			// If I am the player, and I don't have stock, and the station has stock, and I wasn't just here ... 
			// if there is only one stock left, alert the user that they will penalize everyone for taking it
			} else if (myId == playerId && !playerStock[index] && checkOutStation(stationId) && !lastVisited(stationId)){
				
				if (missionCount<40 && Math.random()>.4){     //randomly get mission
					onMission = true;
					missionCount++;
					missionStation = Math.floor((Math.random() * numStations) + 1);
					while(missionStation == stationId){
						missionStation = Math.floor((Math.random() * numStations) + 1);
					}
					//console.log(missionStation);
					console.log("Mission Count: " + missionCount);
					console.log("Mission: " + onMission);

				}      
				if(stationStock[stationIndex] == 1){
					var r = confirm("Taking bike will incur system wide penalty, proceed?");
					if (r) {
						var checkInStatus = [playerId, stationId];
					    socket.emit ('checkInConfirm', checkInStatus);
					    // lastStationVisited = stationId; //REMOVE THIS
					    console.log('Took Bike!');
					   	if (onMission){
					   	 alert("New Mission: Take Bike to Station: " + missionStation);
					   	 console.log("New Mission!");
					   	}
					}
				} else {				
					var r = confirm("Take Bike?");
					if (r) {
						var checkInStatus = [playerId, stationId];
					    socket.emit ('checkInConfirm', checkInStatus);
					    // lastStationVisited = stationId;   //REMOVE THIS
					    console.log('Took Bike!');
					    if (onMission){
					   	 alert("New Mission: Take Bike to Station: " + missionStation);
					   	 console.log("New Mission!");
					   	}
					}
				} 				 

			// =====================================================
			// 5 - Prevent users from returning or taking from the same station
			// =====================================================
			// If I am the player, and I don't have stock, and the station has stock, and I wasn't just here ... 
			// if there is only one stock left, alert the user that they will penalize everyone for taking it
			} else if (myId == playerId && lastVisited(stationId)){
				if (playerStock[index]){
					alert("You have to return to a different station!");
				} else if (!playerStock[index]) {
					alert("You can't pickup from the place you dropped off!");
				}
			}
			 createBarChart(data, dataStation);
		});

		// support function to check if the station has space available
		function checkInStation(station){			
			var index = stationIds.indexOf(parseInt(station));
			if (stationStock[index] == 5){
				alert("Station is full - find another!");
				return false;
			} else {
				return true;
			}
		};

		// support function to check if the station has stock available
		function checkOutStation(station){			
			var index = stationIds.indexOf(parseInt(station));
			if (stationStock[index] == 0){
				alert("Station is empty - find another!");
				return false;
			} else {
				return true;
			}
		};

		// support function to check if the station was just visited
		function lastVisited(station){
			if (station == lastStationVisited){
				return true;
			} else {
				return false;
			}
		}

		socket.on('playerUpdate', function (playerData){
			//playerId playerData[0] number
			//playerPts playerData[1] number
			//playerStock playerData[2]	boolean

			for (var i = 0; i < playerData.length; i++){
				var index = playerIds.indexOf(parseInt(playerData[i][0]));
				if (playerPoints[index] != playerData[i][1]){
					playerPoints[index] = playerData[i][1];
					shouldWeUpdate = true;
				}
				if( playerStock[index] != playerData[i][2]){
					playerStock[index] = playerData[i][2];
					shouldWeUpdate = true;
				}
			}
		//	if (shouldWeUpdate == true){
				createBarChart(data, dataStation);
				shouldWeUpdate = false;
			//}
		});

		socket.on('stationUpdate', function (stationData){
			//stationId stationData[0] number
			//stationInv stationData[1] number
			//stationBonus stationData[2] boolean
			//stationBonusPts = stationData[3] number	
			var dataSaved = false;

			for (var i = 0; i < stationData.length; i++){
				var index = stationIds.indexOf(parseInt(stationData[i][0]));
				if (stationStock[index] != stationData[i][1]){
					stationStock[index] = stationData[i][1];
					shouldWeUpdate = true;
				}

				if( stationStock[index] != stationData[i][1]){
					stationStock[index] = stationData[i][1];
					shouldWeUpdate = true;
				}

				if(stationBonuses[index] != stationData[i][2]){
					stationBonuses[index] = stationData[i][2];
					shouldWeUpdate = true;
				}

				if(stationBonusPts[index] != stationData[i][3]){
					stationBonusPts[index] = stationData[i][3];
					shouldWeUpdate = true;
				}

			}
			
			
			$(document).ready(function(){

  				// var bodyElement = document.getElementById("bodyColorChange"); 
  				// bodyElement.style.backgroundColor = 'steelblue';
		  		data =[];
				dataStation = [];
		        var changeColor = [];
		        var images = [
					'http://s30.postimg.org/klsuifocd/man_walk.png',
					'http://s29.postimg.org/5q79odsrb/bike_pictogram_md.png'
					 ];
		    for (var i = 0; i<playerIds.length; i++){
		    	 if(playerStock[i]==1){
		    	 	pStockIndicator[i] = images[1];
			     }else{
 		    	 	pStockIndicator[i] = images[0];
			     }
			     if(playerIds[i] == myId) console.log("Stock: "+ playerStock[i]);
			     if(playerPoints[i] < 0){
			        barPlus[i] = 0;
			        // barPointMinus[i] = Math.abs(playerPoints[i]);
			         var percentageOfTotal = Math.floor((Math.abs(playerPoints[i]) / maxAllowedNegPoints)*negativeDisplaySize);
			         barMinus[i] = percentageOfTotal;
			      }
			      else{
			        barMinus[i] = 0;
			         var percentageOfTotal = Math.floor((Math.abs(playerPoints[i]) / maxAllowedPoints)*positiveDisplaySize);
			         barPlus[i] = percentageOfTotal;
			      }
			      if(playerIds[i] == myId){
			        activePlayer[i] = 'red';
			        playerBorderOn[i] = 2;
		      //    	if(playerStock[i] == 1){
		      //    		console.log("THIS IS HAPPENING");
        // 				//bodyElement.style.backgroundColor = 'steelblue';
    				// }else{
      		// 			bodyElement.style.backgroundColor = 'white';
   				 // 	}
			      }else{
			         activePlayer[i] = 'black';
			         playerBorderOn[i] = 0;
			      }

		      data.push({name: playerIds[i], playerPoints: playerPoints[i], playerIds: playerIds[i], playerStock: playerStock[i], onOff: pStockIndicator[i], barPlus: barPlus[i], barMinus: barMinus[i], activePlayer: activePlayer[i], playerBorderOn : playerBorderOn[i]});
		    }
		    for (var i = 0; i<stationStock.length; i++){
		      var changeCol = [];
		        for (var j = 0; j< (stationStock[i]); j++){
		              changeCol.push('full');
		        }
		        for (var j = 0; j< (5-stationStock[i]); j++){
		              changeCol.push('empty');
		        }  
		        changeColor.push(changeCol);
		    }
		    for (var i = 0; i<stationIds.length; i++){
		      dataStation.push({name:'Station ' + stationIds[i], stationId: stationIds[i], stationBonus: stationBonusPts[i], stationStock: stationStock[i], changeColor: changeColor[i]});
		    }
			});	
			//if(shouldWeUpdate == true ){
				createBarChart(data, dataStation);
				shouldWeUpdate = false;
		//	}
			
			
});



function createBarChart(data, dataStation){
		console.log("Updating!");
  			// the 'each' function goes through every element of the data array and operates on it
  			//$('bodyColorChange').empty();
  			$('#line').empty();
  			$('#inventoryHolder').empty();
			$('#barChartHolder').empty();
  			$.each(data, function(index) {
          $('#barChartHolder').append(
            '<div class="chart-holder" id="'+data[index].playerIds+'" style="'+
              'position: relative;'+
              'border: ' + data[index].playerBorderOn+'px dotted red;'+
              'border-radius: 5px;'+
              'max-width: '+screenWidth+'px;'+
              'min-width: '+screenWidth+'px;'+
              'margin: 5px auto;'+
              'display: -webkit-flex;'+
              'display: flex;'+
              'flex-flow: row;'+
            '">'+
            '<div id="name" style="'+
            'position: relative;'+
            'min-width: 48px;'+
            'max-width: 48px;'+
            'color: '+data[index].activePlayer+';'+
            'font: 12px Helvetica;'+
            'padding-top: 4px;'+
              'margin-left: 0px;'+
              'text-align: left;'+
              'background: transparent;'+
              '-webkit-flex: 1 3 12%;'+
                      'flex: 1 3 12%;'+
              '-webkit-order: 1;'+
                      'order: 1;'+
                      '">'+data[index].name+': <span style="font-weight: bold;">'+data[index].playerPoints+'<span style="font-weight: normal;">pt</span></span></div>'+
              '<div class="bar-blank" style="'+
              'max-width: '+maxWidthMinus+'px;'+
             
      ' border: 0px solid black; -webkit-flex: 1 1 '+(parseInt(negativeDisplaySize-data[index].barMinus))+'%; flex: 1 1 '+(parseInt(negativeDisplaySize-data[index].barMinus))+'%; -webkit-order: 2;'+
              'order: 2;"></div>'+
              '<div class="bar-" style="'+
              'max-width: '+maxWidthMinus+'px;'+
              'min-width: 0px;'+
              ' color: white;'+
              ' font: 9px Helvetica;'+
              ' text-align: right;'+
              ' border-left: 1px solid black;'+
              ' -webkit-flex: 1 1 '+data[index].barMinus+'%;'+
              ' flex: 1 3 '+data[index].barMinus+'%;'+
              ' -webkit-order: 3;'+
              ' order: 3;"></div>'+
              '<div class="bar" style="'+
              'max-width: '+maxWidthPlus+'px;'+
              'min-width: 0px;'+
              ' color: white;'+
              ' font: 9px Helvetica;'+
              ' -webkit-align-items: left;'+
              ' border: 0px solid black;'+
              ' border-right: 1px solid black;'+
              ' -webkit-flex: 1 1 '+data[index].barPlus+'%;'+
              ' flex: 1 1 '+data[index].barPlus+'%;'+
              ' -webkit-order: 4;'+
              ' order: 4;"></div>'+
              '<div class="barBlank" style="max-width: '+maxWidthPlus+'px; min-width: 0px; -webkit-flex: 1 1 '+(parseInt(positiveDisplaySize-data[index].barPlus))+'%; flex: 1 1 '+(parseInt(positiveDisplaySize-data[index].barPlus))+'%; -webkit-order: 5; order: 5;"></div>'+
              '<div id="'+data[index].playerIds+'" style="'+
            'position: relative;'+
            'min-width: 28px;'+
            'max-width: 28px;'+
              'margin-left: 3px;'+
              'background: transparent;'+
              '-webkit-flex: 1 3 8%;'+
                      'flex: 1 3 8%;'+
              '-webkit-order: 6;'+
                      'order: 6;'+
                      '"><img class="textWrap" src="'+data[index].onOff+'" alt="pictrgrams" style="width:28px; height:28px;"></div>'+
                    
          	'</div>'
          );
       });  

  $('#line').append(
          '<div style="position: relative; margin-top: 20px; margin-left: auto; margin-right: auto; border-bottom: 2px solid #c0c0c0; max-width: 400px; text-align: center">'
     );

      $.each(dataStation, function(index) {

          $('#inventoryHolder').append(
            '<div class="inventory" id="'+dataStation[index].ids+'" style="'+
              'position: relative;'+
              'min-height: 20px;'+
              'max-width: 400px;'+
              'margin: 10px auto;'+
              'padding: 0px;'+
              'display: -webkit-flex;'+
              'display: flex;'+
              'flex-flow: row;'+
              'border-bottom: 0px solid #c0c0c0;'+
            '">'+
            '<div id="stationName" style="'+
            'position: relative;'+
            'font: 12px Helvetica;'+
              'margin-left: 15px;'+
              'padding-right: 4px;'+
               'min-width: 220px;'+
              'max-width: 300px;'+
              'text-align: left;'+
              'border: 1px; solid black;'+
              'background: transparent;'+
              'height: 100%;'+
              'padding-top: 4px;'+
              '-webkit-align-items:center'+
              '-webkit-flex: 1 3 60%;'+
                      'flex: 1 3 60%;'+
              '-webkit-order: 1;'+
                      'order: 1;'+
                      '">STATION '+dataStation[index].stationId+' - BONUS: <span style="font-weight: bold;">'+dataStation[index].stationBonus+'</span> pt   </span></div>'+
                      '<div></div>'+
              '<div class="'+dataStation[index].changeColor[0]+'"></div>' +
              '<div class="'+dataStation[index].changeColor[1]+'" style=""></div>' +
              '<div class="'+dataStation[index].changeColor[2]+'" style=""></div>' +
              '<div class="'+dataStation[index].changeColor[3]+'" style=""></div>' +
              '<div class="'+dataStation[index].changeColor[4]+'" style=""></div>' +
            '</div>'+
            '</div>'
          );
        //console.log(dataStation);
     });
	

};
	</script>
</head>